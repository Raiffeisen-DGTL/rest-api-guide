# AUTOGENERATED - DO NOT EDIT THIS FILE MANUALLY
documentationUrl: https://gitlabci.raiffeisen.ru/cib/api-guide/-/tree/master/spectral/rules
aliases:
  ArrayProperties:
    targets:
      - formats:
          - "oas3_0"
        given:
          - "$..[?(@ && @.type==\"array\")]"
      - formats:
          - "oas3_1"
        given:
          - "$..[?(@ && @.type==\"array\")]"
          - "$..[?(@ && @.type && @.type.constructor.name === \"Array\" && @.type.includes(\"array\"))]"
  LinkObject:
    targets:
      - formats:
          - "oas3"
        given:
          - "$.components.links[*]"
          - "#ResponseObject.links[*]"
  OperationObject:
    - "#PathItem[get,put,post,delete,options,head,patch,trace]"
  PathItem:
    - "$.paths[*]"
  ResponseObject:
    targets:
      - formats:
          - "oas3"
        given:
          - "#OperationObject.responses[*]"
          - "$.components.responses[*]"
  SecurityRequirementObject:
    - "$.security[*]"
    - "#OperationObject.security[*]"
extends: [['spectral:oas', off]]
functions:
  - "allOffTypesConsistency"
  - "methodRequestResponseComponents"
  - "refSiblings"
  - "oasSecurityDefined"
  - "serverVariables"
  - "oasUnusedComponent"
  - "oasExample"
  - "objectRequestResponsePostfix"
  - "uniquenessTags"
  - "oasOpIdUnique"
  - "oasOpParams"
  - "oasOpSuccessResponse"
  - "oasTagDefined"
  - "oasPathParam"
  - "provideHeadMethod"
  - "typedEnum"
  - "validSchemaExample"
rules:
  all-off-types-consistency:
    description: "Все элементы allOf должны иметь одинаковый тип"
    given: "$..[?(@ && @.allOf)]"
    severity: "error"
    then:
      function: "allOffTypesConsistency"
  array-items:
    description: "Объекты типа Array должны содержать массив элементов"
    formats:
      - "oas3_0"
      - "oas3_1"
    given: "#ArrayProperties"
    resolved: false
    severity: "error"
    then:
      field: "items"
      function: "truthy"
  blank-strings-forbidden:
    description: "Пустые строки запрещены"
    formats:
      - "oas3_0"
      - "oas3_1"
    given:
      - "$..[description,title]"
      - "$..[required[*]]"
      - "$..[summary,example]"
      - "$..[x-raif-api-description-en]"
    severity: "error"
    then:
      function: "pattern"
      functionOptions:
        match: "(.|\\s)*\\S(.|\\s)*"
  body-fields-camel-case:
    description: "Поля в requestBody и responseBody должны быть в camelCase"
    given:
      - "$.paths.*.*.requestBody.content.*.schema..properties.*~"
      - "$.paths.*.requestBody.content.*.schema..properties.*~"
      - "$.paths.*.*.responses.*.content.*.schema..properties.*~"
      - "$.paths.*.responses.*.content.*.schema..properties.*~"
      - "$.components.schemas.*..properties.*~"
      - "$.components.requestBodies.*.content.*.schema..properties.*~"
      - "$.components.responses.*.content.*.schema..properties.*~"
    resolved: false
    severity: "error"
    then:
      function: "casing"
      functionOptions:
        type: "camel"
  contact-x-short-team-name-required:
    description: "Поле info.contact.x-short-team-name является обязательным"
    given: "$.info"
    message: "Отсутствует поле info.contact.x-short-team-name"
    severity: "error"
    then:
      field: "contact.x-short-team-name"
      function: "truthy"
  contact-x-team-id-required:
    description: "Поле info.contact.x-team-id является обязательным"
    given: "$.info"
    message: "Отсутствует поле info.contact.x-team-id"
    severity: "error"
    then:
      field: "contact.x-team-id"
      function: "truthy"
  duplicated-entry-in-enum:
    description: "Значения в ENUM должны быть уникальны."
    documentationUrl: "https://gitlabci.raiffeisen.ru/cib/api-guide"
    given: "$..enum"
    message: "Duplicate entry '{{value}}' in enum."
    severity: "error"
    then:
      function: "schema"
      functionOptions:
        schema:
          type: "array"
          uniqueItems: true
  empty-objects-forbidden:
    description: "Запрещены пустые объекты"
    given:
      - "$"
      - "$..*"
    severity: "error"
    then:
      function: "schema"
      functionOptions:
        schema:
          not:
            maxProperties: 0
            type: "object"
  enum-discriminator-upper-snaker-case:
    description: "Перечисления и значения маппинга для дискримinator именуются UPPER_SNAKE_CASE"
    given:
      - "$.components.schemas..enum[*]"
      - "$.components.schemas..discriminator.mapping.*~"
    message: "Enum values and discriminator mappings must be in UPPER_SNAKE_CASE format"
    severity: "error"
    then:
      function: "casing"
      functionOptions:
        type: "macro"
  external-ref-forbidden:
    description: "Все $ref должны ссылаться на components"
    given: "$..$ref"
    message: "Найдена ссылка на внешний компонент {{value}}"
    resolved: false
    severity: "error"
    then:
      function: "pattern"
      functionOptions:
        match: "^#/components"
  info-contact:
    description: "Блок info должен содержать раздел description"
    given: "$"
    severity: "error"
    then:
      field: "info.description"
      function: "truthy"
  method-operation-id-camel-case:
    description: "OperationId должны быть в camelCase формате"
    given: "$.paths[*][get,put,post,delete,options,head,patch,trace]"
    severity: "error"
    then:
      field: "operationId"
      function: "casing"
      functionOptions:
        type: "camel"
  method-request-response-components:
    description: "Тело запроса и ответа должны быть вынесены в блок components как schema"
    given: "$.paths"
    resolved: false
    severity: "error"
    then:
      function: "methodRequestResponseComponents"
  no-eval-in-markdown:
    description: "Блок description и title не должен содержать eval()"
    given: "$..[description,title]"
    resolved: false
    severity: "error"
    then:
      function: "pattern"
      functionOptions:
        notMatch: "eval\\("
  no-ref-siblings:
    description: "Рядом с $ref не должно быть property"
    formats:
      - "oas3_0"
    given: "$..[?(@property === '$ref')]"
    resolved: false
    severity: "error"
    then:
      function: "refSiblings"
  no-script-tags-in-markdown:
    description: "Блок description и title не должен содержать <script>"
    given: "$..[description,title]"
    severity: "error"
    then:
      function: "pattern"
      functionOptions:
        notMatch: "<script"
  not-use-redirection-codes:
    description: "Не используйте коды перенаправления в responses"
    given:
      - "$.paths.*.*.responses.*~"
      - "$.paths.*.responses.*~"
      - "$.webhooks.*.*.responses.*~"
    severity: "error"
    then:
      function: "pattern"
      functionOptions:
        notMatch: "^3(?!04$)(?:\\d{2}|XX)$"
  oas3-1-servers-in-webhook:
    description: "Webhooks не должны включать в себя servers"
    formats:
      - "oas3_1"
    given:
      - "$.webhooks.servers"
      - "$.webhooks[*][*].servers"
    severity: "error"
    then:
      function: "undefined"
  oas3-api-servers:
    description: "Servers должны быть заполнены"
    formats:
      - "oas3_0"
    given: "$"
    resolved: false
    severity: "error"
    then:
      field: "servers"
      function: "schema"
      functionOptions:
        dialect: "draft7"
        schema:
          items:
            type: "object"
          minItems: 1
          type: "array"
  oas3-callbacks-in-callbacks:
    description: "Callbacks не должны включать в себя callbacks"
    formats:
      - "oas3"
    given: "$.paths[*][get,put,post,delete,options,head,patch,trace].callbacks[*][*][*].callbacks"
    severity: "error"
    then:
      function: "undefined"
  oas3-examples-value-or-externalValue:
    description: "Examples должен содержать value или externalValue"
    formats:
      - "oas3"
    given:
      - "$.components.examples[*]"
      - "$.paths[*][*]..content[*].examples[*]"
      - "$.paths[*][*]..parameters[*].examples[*]"
      - "$.components.parameters[*].examples[*]"
      - "$.paths[*][*]..headers[*].examples[*]"
      - "$.components.headers[*].examples[*]"
    resolved: false
    severity: "warn"
    then:
      function: "xor"
      functionOptions:
        properties:
          - "externalValue"
          - "value"
  oas3-operation-security-defined:
    description: "Операция \"security\" должна быть определена в объекте \"components.securitySchemes\""
    formats:
      - "oas3"
    given: "#SecurityRequirementObject"
    resolved: false
    severity: "error"
    then:
      function: "oasSecurityDefined"
      functionOptions:
        oasVersion: 3
  oas3-parameter-description:
    description: "Параметры должны иметь заполненный description"
    formats:
      - "oas3"
    given:
      - "#PathItem.parameters[?(@ && @.in)]"
      - "#OperationObject.parameters[?(@ && @.in)]"
      - "$.components.parameters[?(@ && @.in)]"
    resolved: false
    severity: "warn"
    then:
      field: "description"
      function: "truthy"
  oas3-schema: "error"
  oas3-server-trailing-slash:
    description: "Servers не должны заканчиваться на символ /"
    formats:
      - "oas3"
    given: "$.servers[*].url"
    severity: "info"
    then:
      function: "pattern"
      functionOptions:
        notMatch: "./$"
  oas3-server-variables:
    description: "Переменные из servers должны быть определены в variables и не должно быть неиспользуемые переменных"
    given:
      - "$.servers[*]"
      - "#PathItem.servers[*]"
      - "#OperationObject.servers[*]"
      - "#LinkObject.server"
    severity: "error"
    then:
      function: "serverVariables"
      functionOptions:
        checkSubstitutions: true
        requireDefault: true
  oas3-unused-component:
    description: "Спецификация не должна содержать неиспользуемые компоненты"
    formats:
      - "oas3_0"
    given: "$"
    resolved: false
    severity: "error"
    then:
      function: "oasUnusedComponent"
  oas3-valid-media-example:
    description: "Examples должны соответствовать объявленной схеме"
    formats:
      - "oas3_0"
    given:
      - "$..content..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
      - "$..headers..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
      - "$..parameters..[?(@ && @.schema && (@.example !== void 0 || @.examples))]"
    severity: "error"
    then:
      function: "oasExample"
      functionOptions:
        oasVersion: 3
        schemaField: "schema"
        type: "media"
  oas3-valid-schema-example:
    description: "Examples в описании схемы должны соответствовать объявленным типам"
    formats:
      - "oas3_0"
    given:
      - "$.components.schemas..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
      - "$..content..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
      - "$..headers..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
      - "$..parameters..[?(@property !== 'properties' && @ && (@ && @.example !== void 0 || @.default !== void 0) && (@.enum || @.type || @.format || @.$ref || @.properties || @.items))]"
    severity: "error"
    then:
      function: "oasExample"
      functionOptions:
        oasVersion: 3
        schemaField: "$"
        type: "schema"
  oas3_1-callbacks-in-webhook:
    description: "Webhooks не должны включать в себя callbacks"
    formats:
      - "oas3_1"
    given: "$.webhooks[*][*].callbacks"
    severity: "error"
    then:
      function: "undefined"
  object-request-response-postfix:
    description: "Объекты запросов и ответов должны быть заданы стилем PascalCase с постфиксами Request/Response"
    given:
      - "$.components.schemas.*~"
    severity: "warn"
    then:
      function: "objectRequestResponsePostfix"
  openapi-tags:
    description: "Массив tags не должен быть пустым"
    given: "$"
    severity: "error"
    then:
      field: "tags"
      function: "length"
      functionOptions:
        min: 1
  openapi-tags-alphabetical:
    description: "Tags должны быть в алфавитном порядке"
    given: "$"
    resolved: false
    severity: "info"
    then:
      field: "tags"
      function: "alphabetical"
      functionOptions:
        keyedBy: "name"
  openapi-tags-uniqueness:
    description: "Названия тегов должны быть уникальными"
    given: "$.tags"
    resolved: false
    severity: "error"
    then:
      function: "uniquenessTags"
  operation-description:
    description: "Блок operation.description должен быть заполнен не пустой строкой"
    given: "$.paths[*][get,put,post,delete,options,head,patch,trace]"
    severity: "warn"
    then:
      field: "description"
      function: "truthy"
  operation-operationId:
    description: "Каждый path должен иметь operationId"
    given: "$.paths[*][get,put,post,delete,options,head,patch,trace]"
    severity: "error"
    then:
      field: "operationId"
      function: "truthy"
  operation-operationId-unique:
    description: "OperationId должен быть уникальным"
    given: "$.paths"
    severity: "error"
    then:
      function: "oasOpIdUnique"
  operation-operationId-valid-in-url:
    description: "OperationId не должен содержать запрещенных символов"
    given: "#OperationObject"
    resolved: false
    severity: "error"
    then:
      field: "operationId"
      function: "pattern"
      functionOptions:
        match: "^[A-Za-z0-9-._~:/?#\\[\\]@!\\$&'()*+,;=]*$"
  operation-parameters:
    description: "Параметры в методах должны быть уникальными"
    given: "#OperationObject.parameters"
    resolved: false
    severity: "error"
    then:
      function: "oasOpParams"
  operation-singular-tag:
    description: "Метод должен иметь не более одного тега"
    given: "#OperationObject"
    resolved: false
    severity: "error"
    then:
      field: "tags"
      function: "length"
      functionOptions:
        max: 1
  operation-success-response:
    description: "Метод должен иметь 2хх либо 3хх ответ"
    given: "#OperationObject"
    resolved: false
    severity: "error"
    then:
      field: "responses"
      function: "oasOpSuccessResponse"
  operation-tag-defined:
    description: "Tags методов должны быть определены в глобальном списке tags"
    given: "$"
    resolved: false
    severity: "error"
    then:
      function: "oasTagDefined"
  path-declarations-must-exist:
    description: "Параметры пути не должны записываться пустыми элементами, например \"/given/{}\""
    given: "$.paths"
    severity: "error"
    then:
      field: "@key"
      function: "pattern"
      functionOptions:
        notMatch: "{}"
  path-kebab-case:
    description: "Path должны быть в kebabCase формате"
    given: "$.paths.*~"
    severity: "error"
    then:
      field: "@key"
      function: "pattern"
      functionOptions:
        match: "^/(?:[a-z][a-z0-9]*(?:-[a-z0-9]+)*|\\{[A-Za-z0-9_]+\\})(?:/(?:[a-z][a-z0-9]*(?:-[a-z0-9]+)*|\\{[A-Za-z0-9_]+\\}))*$"
  path-keys-no-trailing-slash:
    description: "Path не должен заканчиваться на символ /"
    given: "$.paths"
    severity: "info"
    then:
      field: "@key"
      function: "pattern"
      functionOptions:
        notMatch: "./$"
  path-no-redundant-prefixes:
    description: "В paths запрещено использовать сегменты api, openapi, http, service"
    given:
      - "$.paths.*~"
    severity: "error"
    then:
      function: "pattern"
      functionOptions:
        notMatch: "(?:^|/)(?:api|openapi|http|service)(?:/|$)"
  path-not-include-query:
    description: "Path не должен содержать символов \"?\""
    given: "$.paths"
    severity: "error"
    then:
      field: "@key"
      function: "pattern"
      functionOptions:
        notMatch: "\\?.+"
  path-params:
    description: "Параметры пути должны быть описаны и использованы"
    given: "$.paths"
    resolved: false
    severity: "error"
    then:
      function: "oasPathParam"
  provide-head-method:
    description: "API для скачивания какого-либо файла должно поддерживать метод **HEAD**"
    given:
      - "$.paths.*"
    severity: "error"
    then:
      function: "provideHeadMethod"
  query-params-camel-case:
    description: "Params должны быть в camelCase формате"
    given:
      - "$.paths.*.*.parameters[?(@.in == \"query\")].name"
      - "$.paths.*.parameters[?(@.in == \"query\")].name"
      - "$.components.parameters.*[?(@.in == \"query\")].name"
    severity: "error"
    then:
      function: "casing"
      functionOptions:
        type: "camel"
  supported-schema-version:
    description: "Спецификация должна быть версии 3+"
    given: "$"
    message: "Схема документа не равна 3+"
    severity: "error"
    then:
      - field: "openapi"
        function: "truthy"
      - field: "openapi"
        function: "pattern"
        functionOptions:
          match: "^3\\.\\d{1}\\.\\d{1}$"
  tag-description:
    description: "Блок tags должен содержать description"
    given: "$.tags[*]"
    severity: "warn"
    then:
      field: "description"
      function: "truthy"
  typed-enum:
    description: "Каждый элемент Enum должен соответствовать указанному типу"
    given: "$..[?(@ && @.enum && @.type)]"
    severity: "error"
    then:
      function: "typedEnum"
  url-versioning:
    description: "Версия должна быть указана в пути запроса, в начале метода, в формате /beta, /v1, /v2 и т.д."
    given:
      - "$.paths.*~"
    severity: "error"
    then:
      field: "@key"
      function: "pattern"
      functionOptions:
        match: "^/(beta|v\\d+)(?:/.*)?$"
  use-most-common-http-codes:
    description: "Используйте только наиболее распространенные коды состояния HTTP"
    given:
      - "$.paths.*.*.responses.*~"
      - "$.paths.*.responses.*~"
    severity: "error"
    then:
      function: "pattern"
      functionOptions:
        notMatch: "^(205|206|207|301|302|303|307|308|408|417|418|422|424|431|505|507|511)$"
  valid-schema-example:
    description: "Все схемы должны иметь example"
    given:
      - "$..content.*.schema"
      - "$..headers.*.schema"
      - "$..parameters.*.schema"
    severity: "error"
    then:
      function: "validSchemaExample"
